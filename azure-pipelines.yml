strategy:
  matrix:
  #  linux:
  #    imageName: 'ubuntu-16.04'
  #    buildType: 'appbundle'
  #    buildOutDir: 'build/app/outputs/bundle/release'
    mac:
      imageName: 'macos-10.13'
      buildType: 'ios'
      buildOutDir: 'build/ipa'

trigger:
- master
- rel/*

pr:
- master
- rel/*

pool:
  vmImage: $(imageName)

steps:
- script: git submodule update --init --recursive
  displayName: 'Update submodules'
- task: DownloadSecureFile@1
  inputs:
    secureFile: "google-services.json"
- task: DownloadSecureFile@1
  inputs:
    secureFile: "GoogleService-Info.plist"
- task: DownloadSecureFile@1
  inputs:
    secureFile: "developer.p12"
  condition: eq(variables['buildType'], 'ios')
- task: DownloadSecureFile@1
  inputs:
    secureFile: "distribution.p12"
  condition: eq(variables['buildType'], 'ios')
- script: CERT_PASSWORD="$(cert_password)" TEMPDIR="$(Agent.TempDirectory)" ./install-certs.sh
  displayName: 'Import certificates (iOS)'
  condition: eq(variables['buildType'], 'ios')
- task: InstallAppleProvisioningProfile@1
  inputs:
    provisioningProfileLocation: 'secureFiles'
    provProfileSecureFile: 'sirene.mobileprovision'
  displayName: 'Set up provisioning profiles (iOS)'
  condition: eq(variables['buildType'], 'ios')
- script: mv $(Agent.TempDirectory)/google-services.json ./android/app/
  displayName: 'Move Firebase keys into place (Android)'
- script: mv $(Agent.TempDirectory)/GoogleService-Info.plist ./ios/Runner/
  displayName: 'Move Firebase keys into place (iOS)'
- script: ./flutterw doctor
  displayName: 'Set up Flutter'
- script: ./flutterw test
  displayName: 'Flutter Test'
- script: cd ./ios && pod update
  displayName: 'Try to update Cocoapods (iOS)'
  condition: eq(variables['buildType'], 'ios')
- script: ./flutterw build $(buildType)
  displayName: 'Release build'
- script: cd ./ios && xcodebuild -workspace Runner.xcworkspace -scheme Runner -sdk iphoneos -configuration Release archive -archivePath $PWD/build/Runner.xcarchive && xcodebuild -exportArchive -archivePath $PWD/build/Runner.xcarchive -exportOptionsPlist exportOptions.plist -exportPath $PWD/build/ipa/Runner.ipa
  displayName: 'Archive (iOS)'
  condition: eq(variables['buildType'], 'ios')
- script: /usr/bin/env ./uninstall-certs.sh
  displayName: 'De-import certificates (iOS)'
  condition: always()
- task: PublishPipelineArtifact@0
  inputs:
    artifactName: 'outputs'
    targetPath: '$(buildOutDir)'
